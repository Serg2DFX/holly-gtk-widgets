#summary HSimpleList widget informations

= Introduction =

This widget is a simple list widget, as much as I could think similar to the winforms ListBox.  I created because it's faster to use then the usual treeview gtk widget.
It also implements the nice ListBox events MeasureItem and DrawItem.
It supports multiple selection also.   

= Details =

[http://lh3.ggpht.com/fr.daniil/SC2zgXasyRI/AAAAAAAAABo/ZCjZjHBqLdA/simple-gtk-list.jpg]

  * How to add a an item to the list:
{{{
   class MyClass
   {
       ...
 
       public override string ToString()
       {
           return "I'm a class!";
       }
   }
   ...
   listWidget.Items.Add("test!");
   //or add a object 
   listWidget.Items.Add( new MyClass() );
}}}

  * How to add multiple items to the list:
{{{
   string[] items = new string[]{"red", "green", "blue", "yellow", "white"};
   listWidget.Items.AddRange( items );
}}}

  * How to modify an item at a given index:
{{{
   int index = 10;
   listWidget.Items[ index ] = "my new value!";
}}}

  * How to remove an item :
{{{
  //remove the item at the 10'th index
  int index = 10;
  listWidget.Items.RemoveAt( index );
  //remove an object item:
  listWidget.Items.Remove( item );
}}}

  * How to remove all items from list:
{{{
   listWidget.RemoveAllItems();
   //or:
   listWidget.Items.Clear();
}}}


  * How to get / change the selected index/item :
{{{
   Console.WriteLine("Selected index is:" + listWidget.SelectedIndex );
   Console.WriteLine("Selected item is :" +listWidget.SelectedItem   );
   //change current index
   listWidget.SelectedIndex = 15;
   Console.WriteLine("Selected index is:" + listWidget.SelectedIndex );
   Console.WriteLine("Selected item is :" +listWidget.SelectedItem   );
   //change current item
   listWidget.SelectedItem = "my item";
   Console.WriteLine("Selected index is:" + listWidget.SelectedIndex );
   Console.WriteLine("Selected item is :" +listWidget.SelectedItem   );
}}}

  * How to set the default item's height:
{{{
   listWidget.ItemHeight = 25;
}}}

  * How to sort the list items:
{{{
   //use the default sorting:
   listWidget.Sort();
   //or use a comparer
   listWidget.Sort( MyComparer );
}}}

  * SelectionType example:
Selection types are
  # Browse
  # Extended
  # Multiple
  # None
  # Single
In this example we will use the Multiple selection type:
{{{
using HollyLibrary;
using Gtk;

public class MainWin : Gtk.Window
{
        HSimpleList list   = new HSimpleList();
        Button      btn    = new Button("Get selected");

        public MainWin() : base(Gtk.WindowType.Toplevel)
        {
            this.DeleteEvent  += new Gtk.DeleteEventHandler( this.OnDeleteEvent );
            btn.Clicked       += new EventHandler( this.OnBtnClicked );
            //set the selection type            
            list.SelectionType = Gtk.SelectionMode.Multiple;
			//add some items
			list.Items.AddRange( new String[] {"item1","item2","item3","item4"});
            //create a simple layout
			ScrolledWindow sw  = new ScrolledWindow();
			sw.Add( list );
            VBox layout        = new VBox();
            layout.PackStart( sw, false, false, 0 );
            layout.PackStart( btn , false, false, 0 );
            //add the widget to the window
            this.Add( layout );
            //show window
            this.ShowAll();
        }

        private void OnBtnClicked (object sender, EventArgs args)
        {
            //you have to possibilities here: use the getSelectedIndexes() or use the 
            //getSelectedItems() methods.
            object[] selected_items = list.getSelectedItems();
            foreach( object item in selected_items )
            {
                Console.WriteLine( item );
            }
            int[] selected_indexes = list.getSelectedIndexes();
            foreach( int index in selected_indexes )
            {
                Console.WriteLine( "index: " + index );
            }
        }

        protected virtual void OnDeleteEvent (object o, Gtk.DeleteEventArgs args)
        {
                Gtk.Application.Quit();
                args.RetVal = true;
        }

        public static void Main (string[] args)
        {
                Gdk.Threads.Init ();
                Application.Init ();
                MainWin win = new MainWin();
                win.Show ();
                Gdk.Threads.Enter();
                Application.Run ();
                Gdk.Threads.Leave();
        }
}
}}}

  * How to create customized lists ( owner drawn ):
In this example we will create a font list similar to the font picker's one.
{{{
// Test.cs created with MonoDevelop
// User: dantes at 1:49 PMÂ 5/19/2008
//

using System;
using System.Drawing;
using HollyLibrary;


namespace test
{
	
	
	public class Test : Gtk.Window
	{
		
	HSimpleList list   = new HSimpleList();

        public Test() : base(Gtk.WindowType.Toplevel)
        {
            this.DeleteEvent   += new Gtk.DeleteEventHandler( this.OnDeleteEvent );
	    list.OwnerDraw      = true;
	    list.OnDrawItem    += new DrawItemEventHandler( this.on_draw_item );
	    list.OnMeasureItem += new MeasureItemEventHandler( this.on_measure_item );
            //create a simple layout
	     Gtk.ScrolledWindow sw  = new Gtk.ScrolledWindow();
	     sw.Add( list );
             //add the widget to the window
             this.Add( sw );
	     //add font list to list
	     FontFamily[] fonts = FontFamily.Families;
	     int i = 0;
	     foreach( FontFamily font in fonts )
	     {
		list.Items.Add( font.Name );
	     }
            //show window
            this.ShowAll();
        }

	private void on_draw_item( object o, DrawItemEventArgs args )
	{
		String font_name     = list.Items[ args.ItemIndex ].ToString();
		Graphics g           = args.Graphics;
		g.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighSpeed;
			
		Font font            = new System.Drawing.Font( font_name, 10F );
		Color color          = System.Drawing.Color.Black;
		SolidBrush b         = new System.Drawing.SolidBrush( color );
		g.DrawString( font_name, font, b, args.CellArea.X, args.CellArea.Y );			

	}
		
	private void on_measure_item( object o, MeasureItemEventArgs args )
	{
		//make alternative heights for demonstration
		if( args.Index % 2 == 0 )
			args.ItemHeight = 20;
		else
			args.ItemHeight = 40;
	}

        protected virtual void OnDeleteEvent (object o, Gtk.DeleteEventArgs args)
        {
                Gtk.Application.Quit();
                args.RetVal = true;
        }

        public static void Main (string[] args)
        {
                Gdk.Threads.Init ();
                Application.Init ();
                Test win = new Test();
                win.Show ();
                Gdk.Threads.Enter();
                Application.Run ();
                Gdk.Threads.Leave();
        }
    }
}

}}}